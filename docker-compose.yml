version: '3.4'

x-merge-keys: &shared_settings
  restart: unless-stopped
  healthcheck:
    start_period: 60s
    timeout: 3s
    interval: 60s
    test: "curl -f http://localhost:8080/api/ || exit 1"
  image: docker.io/netboxcommunity/netbox:${VERSION-v3.4-2.5.1}
  depends_on:
  - postgres
  - redis
  - redis-cache
  env_file: 
  #- env/redis.env # For using Portainer comment out
  - stack.env # For using Portainer uncomment this line
  user: 'unit:root'
  volumes:
  #- ./configuration:/etc/netbox/config:z,ro
  #- ./reports:/etc/netbox/reports:z,ro
  #- ./scripts:/etc/netbox/scripts:z,ro
  - netbox-media-files:/opt/netbox/netbox/media:z
  # I switch to named volume and removed readonly. it normally would map to the folders seen in the root of the github project here.
  - netbox_data:/etc/netbox:z
  

services:
  netbox:
    <<: *shared_settings
    ports:
    - 9447:8080
    
  netbox-worker:
    <<: *shared_settings
    depends_on:
      netbox:
        condition: service_healthy
    command:
    - /opt/netbox/venv/bin/python
    - /opt/netbox/netbox/manage.py
    - rqworker
    healthcheck:
      start_period: 20s
      timeout: 3s
      interval: 15s
      test: "ps -aux | grep -v grep | grep -q rqworker || exit 1"
    
  netbox-housekeeping:
    <<: *shared_settings
    depends_on:
      netbox:
        condition: service_healthy
    command:
    - /opt/netbox/housekeeping.sh
    healthcheck:
      start_period: 20s
      timeout: 3s
      interval: 15s
      test: "ps -aux | grep -v grep | grep -q housekeeping || exit 1"

  # postgres
  postgres:
    restart: unless-stopped
    image: docker.io/postgres:15-alpine
    env_file: 
    #- env/redis.env # For using Portainer comment out
    - stack.env # For using Portainer uncomment this line
    volumes:
    - netbox-postgres-data:/var/lib/postgresql/data

  # redis
  redis:
    restart: unless-stopped
    image: docker.io/redis:7-alpine
    command:
    - sh
    - -c # this is to evaluate the $REDIS_PASSWORD from the env
    - redis-server --appendonly yes --requirepass $$REDIS_PASSWORD ## $$ because of docker-compose
    env_file: 
    #- env/redis.env # For using Portainer comment out
    - stack.env # For using Portainer uncomment this line
    volumes:
    - netbox-redis-data:/data
  redis-cache:
    restart: unless-stopped
    image: redis:7-alpine
    command:
    - sh
    - -c # this is to evaluate the $REDIS_PASSWORD from the env
    - redis-server --requirepass $$REDIS_PASSWORD ## $$ because of docker-compose
    # env_file: # For using Portainer comment out
    #- env/redis.env # For using Portainer comment out
    environment: # For using Portainer uncomment this line
    - REDIS_PASSWORD=${REDIS_CACHE_PASSWORD} # For using Portainer uncomment this line
    volumes:
    - netbox-redis-cache-data:/data

volumes:
  netbox-media-files:
    driver: local
  netbox-postgres-data:
    driver: local
  netbox-redis-data:
    driver: local
  netbox-redis-cache-data:
    driver: local
  netbox_data:
    driver: local
